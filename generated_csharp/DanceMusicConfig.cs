// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct DanceMusicConfigRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DanceMusicConfigRowData GetRootAsDanceMusicConfigRowData(ByteBuffer _bb) { return GetRootAsDanceMusicConfigRowData(_bb, new DanceMusicConfigRowData()); }
  public static DanceMusicConfigRowData GetRootAsDanceMusicConfigRowData(ByteBuffer _bb, DanceMusicConfigRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DanceMusicConfigRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NoteName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNoteNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNoteNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNoteNameArray() { return __p.__vector_as_array<byte>(6); }
  public string BGMName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBGMNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetBGMNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBGMNameArray() { return __p.__vector_as_array<byte>(8); }
  public int TotalTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float TotalTime2 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<DanceMusicConfigRowData> CreateDanceMusicConfigRowData(FlatBufferBuilder builder,
      int iD = 0,
      StringOffset noteNameOffset = default(StringOffset),
      StringOffset BGMNameOffset = default(StringOffset),
      int TotalTime = 0,
      float TotalTime2 = 0.0f) {
    builder.StartObject(5);
    DanceMusicConfigRowData.AddTotalTime2(builder, TotalTime2);
    DanceMusicConfigRowData.AddTotalTime(builder, TotalTime);
    DanceMusicConfigRowData.AddBGMName(builder, BGMNameOffset);
    DanceMusicConfigRowData.AddNoteName(builder, noteNameOffset);
    DanceMusicConfigRowData.AddID(builder, iD);
    return DanceMusicConfigRowData.EndDanceMusicConfigRowData(builder);
  }

  public static void StartDanceMusicConfigRowData(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int iD) { builder.AddInt(0, iD, 0); }
  public static void AddNoteName(FlatBufferBuilder builder, StringOffset noteNameOffset) { builder.AddOffset(1, noteNameOffset.Value, 0); }
  public static void AddBGMName(FlatBufferBuilder builder, StringOffset BGMNameOffset) { builder.AddOffset(2, BGMNameOffset.Value, 0); }
  public static void AddTotalTime(FlatBufferBuilder builder, int TotalTime) { builder.AddInt(3, TotalTime, 0); }
  public static void AddTotalTime2(FlatBufferBuilder builder, float TotalTime2) { builder.AddFloat(4, TotalTime2, 0.0f); }
  public static Offset<DanceMusicConfigRowData> EndDanceMusicConfigRowData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DanceMusicConfigRowData>(o);
  }
};

public struct DanceMusicConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DanceMusicConfig GetRootAsDanceMusicConfig(ByteBuffer _bb) { return GetRootAsDanceMusicConfig(_bb, new DanceMusicConfig()); }
  public static DanceMusicConfig GetRootAsDanceMusicConfig(ByteBuffer _bb, DanceMusicConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DanceMusicConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DanceMusicConfigRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (DanceMusicConfigRowData?)(new DanceMusicConfigRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DanceMusicConfig> CreateDanceMusicConfig(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartObject(1);
    DanceMusicConfig.AddDatalist(builder, datalistOffset);
    return DanceMusicConfig.EndDanceMusicConfig(builder);
  }

  public static void StartDanceMusicConfig(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<DanceMusicConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<DanceMusicConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DanceMusicConfig> EndDanceMusicConfig(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DanceMusicConfig>(o);
  }
};

