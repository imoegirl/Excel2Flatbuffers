// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum DanceMusicConfigRowDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct DanceMusicConfigRowData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DanceMusicConfigRowData<'a> {
    type Inner = DanceMusicConfigRowData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> DanceMusicConfigRowData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DanceMusicConfigRowData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DanceMusicConfigRowDataArgs<'args>) -> flatbuffers::WIPOffset<DanceMusicConfigRowData<'bldr>> {
      let mut builder = DanceMusicConfigRowDataBuilder::new(_fbb);
      builder.add_TotalTime2(args.TotalTime2);
      builder.add_TotalTime(args.TotalTime);
      if let Some(x) = args.BGMName { builder.add_BGMName(x); }
      if let Some(x) = args.noteName { builder.add_noteName(x); }
      builder.add_iD(args.iD);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_NOTENAME: flatbuffers::VOffsetT = 6;
    pub const VT_BGMNAME: flatbuffers::VOffsetT = 8;
    pub const VT_TOTALTIME: flatbuffers::VOffsetT = 10;
    pub const VT_TOTALTIME2: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn iD(&self) -> i32 {
    self._tab.get::<i32>(DanceMusicConfigRowData::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn noteName(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DanceMusicConfigRowData::VT_NOTENAME, None)
  }
  #[inline]
  pub fn BGMName(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DanceMusicConfigRowData::VT_BGMNAME, None)
  }
  #[inline]
  pub fn TotalTime(&self) -> i32 {
    self._tab.get::<i32>(DanceMusicConfigRowData::VT_TOTALTIME, Some(0)).unwrap()
  }
  #[inline]
  pub fn TotalTime2(&self) -> f32 {
    self._tab.get::<f32>(DanceMusicConfigRowData::VT_TOTALTIME2, Some(0.0)).unwrap()
  }
}

pub struct DanceMusicConfigRowDataArgs<'a> {
    pub iD: i32,
    pub noteName: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub BGMName: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub TotalTime: i32,
    pub TotalTime2: f32,
}
impl<'a> Default for DanceMusicConfigRowDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        DanceMusicConfigRowDataArgs {
            iD: 0,
            noteName: None,
            BGMName: None,
            TotalTime: 0,
            TotalTime2: 0.0,
        }
    }
}
pub struct DanceMusicConfigRowDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DanceMusicConfigRowDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_iD(&mut self, iD: i32) {
    self.fbb_.push_slot::<i32>(DanceMusicConfigRowData::VT_ID, iD, 0);
  }
  #[inline]
  pub fn add_noteName(&mut self, noteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DanceMusicConfigRowData::VT_NOTENAME, noteName);
  }
  #[inline]
  pub fn add_BGMName(&mut self, BGMName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DanceMusicConfigRowData::VT_BGMNAME, BGMName);
  }
  #[inline]
  pub fn add_TotalTime(&mut self, TotalTime: i32) {
    self.fbb_.push_slot::<i32>(DanceMusicConfigRowData::VT_TOTALTIME, TotalTime, 0);
  }
  #[inline]
  pub fn add_TotalTime2(&mut self, TotalTime2: f32) {
    self.fbb_.push_slot::<f32>(DanceMusicConfigRowData::VT_TOTALTIME2, TotalTime2, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DanceMusicConfigRowDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DanceMusicConfigRowDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DanceMusicConfigRowData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum DanceMusicConfigOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct DanceMusicConfig<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DanceMusicConfig<'a> {
    type Inner = DanceMusicConfig<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> DanceMusicConfig<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DanceMusicConfig {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DanceMusicConfigArgs<'args>) -> flatbuffers::WIPOffset<DanceMusicConfig<'bldr>> {
      let mut builder = DanceMusicConfigBuilder::new(_fbb);
      if let Some(x) = args.datalist { builder.add_datalist(x); }
      builder.finish()
    }

    pub const VT_DATALIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn datalist(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DanceMusicConfigRowData<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<DanceMusicConfigRowData<'a>>>>>(DanceMusicConfig::VT_DATALIST, None)
  }
}

pub struct DanceMusicConfigArgs<'a> {
    pub datalist: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<DanceMusicConfigRowData<'a >>>>>,
}
impl<'a> Default for DanceMusicConfigArgs<'a> {
    #[inline]
    fn default() -> Self {
        DanceMusicConfigArgs {
            datalist: None,
        }
    }
}
pub struct DanceMusicConfigBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DanceMusicConfigBuilder<'a, 'b> {
  #[inline]
  pub fn add_datalist(&mut self, datalist: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<DanceMusicConfigRowData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DanceMusicConfig::VT_DATALIST, datalist);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DanceMusicConfigBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DanceMusicConfigBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DanceMusicConfig<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

