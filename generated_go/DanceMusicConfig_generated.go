// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DanceMusicConfigRowData struct {
	_tab flatbuffers.Table
}

func GetRootAsDanceMusicConfigRowData(buf []byte, offset flatbuffers.UOffsetT) *DanceMusicConfigRowData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DanceMusicConfigRowData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DanceMusicConfigRowData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DanceMusicConfigRowData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DanceMusicConfigRowData) ID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DanceMusicConfigRowData) MutateID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *DanceMusicConfigRowData) NoteName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DanceMusicConfigRowData) BGMName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DanceMusicConfigRowData) TotalTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DanceMusicConfigRowData) MutateTotalTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *DanceMusicConfigRowData) TotalTime2() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DanceMusicConfigRowData) MutateTotalTime2(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func DanceMusicConfigRowDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DanceMusicConfigRowDataAddID(builder *flatbuffers.Builder, iD int32) {
	builder.PrependInt32Slot(0, iD, 0)
}
func DanceMusicConfigRowDataAddNoteName(builder *flatbuffers.Builder, noteName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(noteName), 0)
}
func DanceMusicConfigRowDataAddBGMName(builder *flatbuffers.Builder, BGMName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(BGMName), 0)
}
func DanceMusicConfigRowDataAddTotalTime(builder *flatbuffers.Builder, TotalTime int32) {
	builder.PrependInt32Slot(3, TotalTime, 0)
}
func DanceMusicConfigRowDataAddTotalTime2(builder *flatbuffers.Builder, TotalTime2 float32) {
	builder.PrependFloat32Slot(4, TotalTime2, 0.0)
}
func DanceMusicConfigRowDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type DanceMusicConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsDanceMusicConfig(buf []byte, offset flatbuffers.UOffsetT) *DanceMusicConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DanceMusicConfig{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DanceMusicConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DanceMusicConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DanceMusicConfig) Datalist(obj *DanceMusicConfigRowData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DanceMusicConfig) DatalistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DanceMusicConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DanceMusicConfigAddDatalist(builder *flatbuffers.Builder, datalist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(datalist), 0)
}
func DanceMusicConfigStartDatalistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DanceMusicConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
