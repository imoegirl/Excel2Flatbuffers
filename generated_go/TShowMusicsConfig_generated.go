// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TShowMusicsConfigRowData struct {
	_tab flatbuffers.Table
}

func GetRootAsTShowMusicsConfigRowData(buf []byte, offset flatbuffers.UOffsetT) *TShowMusicsConfigRowData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TShowMusicsConfigRowData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TShowMusicsConfigRowData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TShowMusicsConfigRowData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TShowMusicsConfigRowData) ID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TShowMusicsConfigRowData) MutateID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TShowMusicsConfigRowData) NoteName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TShowMusicsConfigRowData) BGMName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TShowMusicsConfigRowData) TotalTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TShowMusicsConfigRowData) MutateTotalTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *TShowMusicsConfigRowData) TotalTime2() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TShowMusicsConfigRowData) MutateTotalTime2(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func TShowMusicsConfigRowDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func TShowMusicsConfigRowDataAddID(builder *flatbuffers.Builder, iD int32) {
	builder.PrependInt32Slot(0, iD, 0)
}
func TShowMusicsConfigRowDataAddNoteName(builder *flatbuffers.Builder, noteName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(noteName), 0)
}
func TShowMusicsConfigRowDataAddBGMName(builder *flatbuffers.Builder, BGMName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(BGMName), 0)
}
func TShowMusicsConfigRowDataAddTotalTime(builder *flatbuffers.Builder, TotalTime int32) {
	builder.PrependInt32Slot(3, TotalTime, 0)
}
func TShowMusicsConfigRowDataAddTotalTime2(builder *flatbuffers.Builder, TotalTime2 float32) {
	builder.PrependFloat32Slot(4, TotalTime2, 0.0)
}
func TShowMusicsConfigRowDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type TShowMusicsConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsTShowMusicsConfig(buf []byte, offset flatbuffers.UOffsetT) *TShowMusicsConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TShowMusicsConfig{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TShowMusicsConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TShowMusicsConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TShowMusicsConfig) Datalist(obj *TShowMusicsConfigRowData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TShowMusicsConfig) DatalistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TShowMusicsConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TShowMusicsConfigAddDatalist(builder *flatbuffers.Builder, datalist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(datalist), 0)
}
func TShowMusicsConfigStartDatalistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TShowMusicsConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
