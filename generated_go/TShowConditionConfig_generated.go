// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TShowConditionConfigRowData struct {
	_tab flatbuffers.Table
}

func GetRootAsTShowConditionConfigRowData(buf []byte, offset flatbuffers.UOffsetT) *TShowConditionConfigRowData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TShowConditionConfigRowData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TShowConditionConfigRowData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TShowConditionConfigRowData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TShowConditionConfigRowData) ID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TShowConditionConfigRowData) MutateID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TShowConditionConfigRowData) OpenTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TShowConditionConfigRowData) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TShowConditionConfigRowData) StyleCondition() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TShowConditionConfigRowData) MutateStyleCondition(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *TShowConditionConfigRowData) StyleNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TShowConditionConfigRowData) MutateStyleNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *TShowConditionConfigRowData) ClothesCondition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TShowConditionConfigRowDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TShowConditionConfigRowDataAddID(builder *flatbuffers.Builder, ID int32) {
	builder.PrependInt32Slot(0, ID, 0)
}
func TShowConditionConfigRowDataAddOpenTime(builder *flatbuffers.Builder, OpenTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(OpenTime), 0)
}
func TShowConditionConfigRowDataAddEndTime(builder *flatbuffers.Builder, EndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(EndTime), 0)
}
func TShowConditionConfigRowDataAddStyleCondition(builder *flatbuffers.Builder, StyleCondition int32) {
	builder.PrependInt32Slot(3, StyleCondition, 0)
}
func TShowConditionConfigRowDataAddStyleNum(builder *flatbuffers.Builder, StyleNum int32) {
	builder.PrependInt32Slot(4, StyleNum, 0)
}
func TShowConditionConfigRowDataAddClothesCondition(builder *flatbuffers.Builder, ClothesCondition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(ClothesCondition), 0)
}
func TShowConditionConfigRowDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type TShowConditionConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsTShowConditionConfig(buf []byte, offset flatbuffers.UOffsetT) *TShowConditionConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TShowConditionConfig{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TShowConditionConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TShowConditionConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TShowConditionConfig) Datalist(obj *TShowConditionConfigRowData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TShowConditionConfig) DatalistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TShowConditionConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TShowConditionConfigAddDatalist(builder *flatbuffers.Builder, datalist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(datalist), 0)
}
func TShowConditionConfigStartDatalistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TShowConditionConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
